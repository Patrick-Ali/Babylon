{
    "class_non_inherit": "class <name>():",
    "class_inherit": "class <name>(<inherit>):",
    "init": {
        "beginning": "def __init__(",
        "end": ")"
    },
    "super": {
        "beginning": "super(",
        "end": ")"
    },
    "self_clean": "self",
    "self_call": "self.",
    "function": {
        "code": "def <name>(<param>):",
        "connect": {
            "first": "paramater",
            "second": "body",
            "third": "return"
        }
    },
    "paramater": "<name> = []",
    "subscript": {
        "beginning": "<name>[",
        "end": "]",
        "open": "["
    },
    "print": {
        "beginning": "print(",
        "end": ")"
    },
    "call": {
        "beginning": "<name>(",
        "end": ")"
    },
    "return": "return <name>",
    "if": {
        "beginning": "if ",
        "comp_one": "<para1>",
        "comp_two": "<para1> <comp> <para2>",
        "or": " or ",
        "and": " and ",
        "less": " < ",
        "more": " > ",
        "less_eq": " <= ",
        "more_eq": " >= ",
        "equal": " == ",
        "in": " in ",
        "not": " not ",
        "not_eq": "!=",
        "end": ":"
    },
    "elif": "elif <condition>:",
    "else": "else",
    "pass": "pass",
    "try_block": {
        "try": "try:",
        "except_condition": "except <exception>:",
        "except": "except:",
        "finally": "finally:"
    },
    "len": {
        "beginning": "len(",
        "end": ")"
    },
    "while_loop": "while <bool>:",
    "for_loop_in": "for <element> in <list>:",
    "for_loop_range": "for <param> in <range>:",
    "run": "if __name__ == '__main__':",
    "import": "import <name>",
    "import_from": "from <name> import <name2>",
    "import_everything": "from <name> import *",
    "functions": {
        "add": {
            "name": "op_add",
            "vars": 2,
            "code": "op_add = <var1> + <var2>",
            "return": "return op_add"
        },
        "subtract": {
            "name": "op_sub",
            "vars": 2,
            "code": "op_sub = <var1> - <var2>",
            "return": "return op_sub"
        },
        "divide": {
            "name": "op_div",
            "vars": 2,
            "code": "op_div = <var1> / <var2>",
            "return": "return op_div"
        },
        "multiply": {
            "name": "op_mul",
            "vars": 2,
            "code": "op_mul = <var1> * <var2>",
            "return": "return op_mul"
        },
        "get": {
            "start": "def <name>(",
            "end": "):",
            "url": "<url>",
            "params": "params=<query>",
            "data": "data=<data>",
            "data_json": "json=<data>",
            "headers": "headers=<head>",
            "auth": "auth=(<user>, <pass>)",
            "auth_rep": "auth=<name>",
            "verify": "verify=<ver>",
            "timeout": "timeout=<tim>",
            "body": "response = requests.get(",
            "bod_end": ")",
            "body2": "if response.status_code == 200 or response.status_code == 201:",
            "body3": "else:",
            "return_fail": "return \"Request failed\"",
            "return_spec": "return response.json()[<name>]",
            "import": "requests",
            "return_text": "return response.text",
            "return_response": "return response",
            "return_json": "return response.json()"
        },
        "post": {
            "start": "def <name>(",
            "end": "):",
            "url": "<url>",
            "params": "params=<query>",
            "data": "data=<data>",
            "data_json": "json=<data>",
            "headers": "headers=<head>",
            "auth": "auth=(<user>, <pass>)",
            "auth_rep": "auth=<name>",
            "verify": "verify=<ver>",
            "timeout": "timeout=<tim>",
            "body": "response = requests.post(",
            "bod_end": ")",
            "body2": "if response.status_code == 200 or response.status_code == 201:",
            "import": "requests",
            "body3": "else:",
            "return_fail": "return \"Request failed\"",
            "return_spec": "return response.json()[<name>]",
            "return_text": "return response.text",
            "return_response": "return response",
            "return_json": "return response.json()"
        },
        "put": {
            "start": "def <name>(",
            "end": "):",
            "url": "<url>",
            "params": "params=<query>",
            "data": "data=<data>",
            "data_json": "json=<data>",
            "headers": "headers=<head>",
            "auth": "auth=(<user>, <pass>)",
            "auth_rep": "auth=<name>",
            "verify": "verify=<ver>",
            "timeout": "timeout=<tim>",
            "body": "response = requests.put(",
            "bod_end": ")",
            "body2": "if response.status_code == 200 or response.status_code == 201:",
            "import": "requests",
            "body3": "else:",
            "return_fail": "return \"Request failed\"",
            "return_spec": "return response.json()[<name>]",
            "return_text": "return response.text",
            "return_response": "return response",
            "return_json": "return response.json()"
        },
        "options": {
            "start": "def <name>(",
            "end": "):",
            "url": "<url>",
            "params": "params=<query>",
            "data": "data=<data>",
            "data_json": "json=<data>",
            "headers": "headers=<head>",
            "auth": "auth=(<user>, <pass>)",
            "auth_rep": "auth=<name>",
            "verify": "verify=<ver>",
            "timeout": "timeout=<tim>",
            "body": "response = requests.options(",
            "bod_end": ")",
            "body2": "if response.status_code == 200 or response.status_code == 201:",
            "import": "requests",
            "body3": "else:",
            "return_fail": "return \"Request failed\"",
            "return_spec": "return response.json()[<name>]",
            "return_text": "return response.text",
            "return_response": "return response",
            "return_json": "return response.json()"
        },
        "patch": {
            "start": "def <name>(",
            "end": "):",
            "url": "<url>",
            "params": "params=<query>",
            "data": "data=<data>",
            "data_json": "json=<data>",
            "headers": "headers=<head>",
            "auth": "auth=(<user>, <pass>)",
            "auth_rep": "auth=<name>",
            "verify": "verify=<ver>",
            "timeout": "timeout=<tim>",
            "body": "response = requests.patch(",
            "bod_end": ")",
            "body2": "if response.status_code == 200 or response.status_code == 201:",
            "import": "requests",
            "body3": "else:",
            "return_fail": "return \"Request failed\"",
            "return_spec": "return response.json()[<name>]",
            "return_text": "return response.text",
            "return_response": "return response",
            "return_json": "return response.json()"
        },
        "head": {
            "start": "def <name>(",
            "end": "):",
            "url": "<url>",
            "params": "params=<query>",
            "data": "data=<data>",
            "data_json": "json=<data>",
            "headers": "headers=<head>",
            "auth": "auth=(<user>, <pass>)",
            "auth_rep": "auth=<name>",
            "verify": "verify=<ver>",
            "timeout": "timeout=<tim>",
            "body": "response = requests.patch(",
            "bod_end": ")",
            "body2": "if response.status_code == 200 or response.status_code == 201:",
            "import": "requests",
            "body3": "else:",
            "return_fail": "return \"Request failed\"",
            "return_spec": "return response.json()[<name>]",
            "return_text": "return response.text",
            "return_response": "return response",
            "return_json": "return response.json()"
        },
        "delete": {
            "start": "def <name>(",
            "end": "):",
            "url": "<url>",
            "params": "params=<query>",
            "data": "data=<data>",
            "data_json": "json=<data>",
            "headers": "headers=<head>",
            "auth": "auth=(<user>, <pass>)",
            "auth_rep": "auth=<name>",
            "verify": "verify=<ver>",
            "timeout": "timeout=<tim>",
            "body": "response = requests.delete(",
            "bod_end": ")",
            "body2": "if response.status_code == 200 or response.status_code == 201:",
            "import": "requests",
            "body3": "else:",
            "return_fail": "return \"Request failed\"",
            "return_spec": "return response.json()[<name>]",
            "return_text": "return response.text",
            "return_response": "return response",
            "return_json": "return response.json()"
        },
        "greater": {
            "name": "op_greater",
            "vars": "2",
            "code": "op_greater = <var1> > <var2>",
            "return": "return op_greater"
        },
        "lesser": {
            "name": "op_lesser",
            "vars": "2",
            "code": "op_lesser = <var1> < <var2>",
            "return": "return op_lesser"
        }
    }
}